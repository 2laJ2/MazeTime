import unittest
from unittest.mock import Mock, ANY
from maze import Maze
from mysteerimaze import Mysteerimaze

class TestMysteerimaze(unittest.TestCase):
    def setUp(self):
        maze_mock = Mock()
        maze_mock._x_max = 10
        maze_mock._y_max = 10
        maze_mock._w = 20
        maze_mock._solution = {}
        self.algoritmi = Mysteerimaze(maze_mock, maze_mock._x_max, maze_mock._y_max, maze_mock._w)
        self.algoritmi._maze = maze_mock
        self.algoritmi._x_max = maze_mock._x_max
        self.algoritmi._y_max = maze_mock._y_max
        self.algoritmi._w = maze_mock._w
        self.algoritmi._solution = maze_mock._solution
        self.algoritmi._grid = []
        x, y = 0, 0
        for i in range(1, maze_mock._y_max + 1):
            x = self.algoritmi._w
            y = y + self.algoritmi._w
            for j in range(1, maze_mock._x_max + 1):
                self.algoritmi._grid.append((x,y))
                x = x + self.algoritmi._w
        self.maxDiff = None

    def test_metodi_gt_always_last_toimii_oikein(self):
        stack, x, y = self.algoritmi.gt_always_last([(4,2),(4,4)],4,4) 
        self.assertEqual(stack, [(4,2)])
        self.assertEqual(x+y, 8)

    def test_metodi_gt_always_random_toimii_oikein(self):
        stack, x, y = self.algoritmi.gt_always_random([(1,1),(1,2),(3,1),(3,2)],3,2)
        self.assertEqual(stack, [(1,1),(1,2),(3,1)])
        self.assertNotEqual(x+y, 5)

    def test_gt_always_first_toimii_oikein(self):
        stack, x, y = self.algoritmi.gt_always_first([(1,1),(1,2),(3,1),(3,2)],3,2)
        self.assertEqual(stack, [(1,1),(1,2),(3,1)])
        self.assertEqual(x+y, 2)
        
    def test_gt_usually_last_occasionally_random_poistaa_ruudun_pinosta(self):
        stack, x, y = self.algoritmi.gt_usually_last_occasionally_random([(1,1),(1,2),(3,1),(3,2)],3,2)
        self.assertEqual(stack, [(1,1),(1,2),(3,1)])
        
    def test_gt_random_among_last_ones_toimii_oikein(self):
        pino = [(1,1),(1,2),(1,3),(1,4),(5,1),(5,2),(5,3),(5,4)]
        a, b = 5, 4
        stack, x, y = self.algoritmi.gt_random_among_last_ones(pino, a, b)
        self.assertEqual(stack, [(1,1),(1,2),(1,3),(1,4),(5,1),(5,2),(5,3)])
        self.assertNotEqual(x+y, 2)
        self.assertNotEqual(x+y, 3)
        self.assertNotEqual(x+y, 9)

    def test_algoritmi_kutsuu_maze_oliota_kun_option_1(self):
        self.algoritmi.carve_mysteerimaze(0, '1')
        self.algoritmi._maze.assert_any_call

    def test_algoritmi_toimii_oikein_kun_option_1(self):
        self.algoritmi.carve_mysteerimaze(0, '1')
        labyrinth = [(20, 20), (20, 40), (20, 60), (40, 60), (40, 80), (40, 100), (20, 100), (20, 80),
        (20, 120), (20, 140), (20, 160), (40, 160), (40, 140), (60, 140), (60, 160), (80, 160), (100, 160),
        (100, 140), (80, 140), (80, 120), (60, 120), (40, 120), (60, 100), (60, 80), (60, 60), (80, 60),
        (80, 80), (80, 100), (100, 100), (100, 80), (120, 80), (120, 60), (100, 60), (100, 40), (100, 20),
        (80, 20), (60, 20), (40, 20), (40, 40), (60, 40), (80, 40), (120, 20), (120, 40), (140, 40),
        (140, 20), (160, 20), (180, 20), (200, 20), (200, 40), (180, 40), (160, 40), (160, 60), (180, 60),
        (200, 60), (200, 80), (200, 100), (180, 100), (180, 120), (180, 140), (160, 140), (160, 120),
        (140, 120), (140, 100), (120, 100), (120, 120), (120, 140), (120, 160), (140, 160), (140, 140),
        (140, 180), (120, 180), (100, 180), (100, 200), (120, 200), (140, 200), (160, 200), (180, 200),
        (180, 180), (160, 180), (160, 160), (180, 160), (200, 160), (200, 180), (200, 200), (200, 140),
        (200, 120), (80, 200), (60, 200), (40, 200), (40, 180), (20, 180), (20, 200), (60, 180), (80, 180),
        (100, 120), (140, 80), (160, 80), (160, 100), (180, 80), (140, 60)]
        self.assertEqual(self.algoritmi.get_visited(), labyrinth)
                
    def test_algoritmi_toimii_oikein_kun_option_2(self):
        self.algoritmi.carve_mysteerimaze(0, '2')
        labyrinth = [(20, 20), (20, 40), (20, 60), (40, 60), (40, 80), (40, 100), (20, 100), (20, 80),
        (20, 120), (20, 140), (20, 160), (40, 160), (40, 140), (60, 140), (60, 160), (80, 160), (100, 160),
        (100, 140), (80, 140), (80, 120), (60, 120), (40, 120), (60, 80), (60, 100), (80, 100), (100, 100),
        (100, 80), (80, 80), (80, 60), (80, 40), (60, 40), (40, 40), (40, 20), (60, 20), (80, 20), (100, 20),
        (100, 40), (100, 60), (120, 60), (120, 40), (120, 20), (140, 20), (160, 20), (180, 20), (200, 20),
        (200, 40), (200, 60), (180, 60), (160, 60), (160, 80), (160, 100), (140, 100), (120, 100), (120, 80),
        (140, 80), (140, 60), (140, 40), (160, 40), (180, 40), (60, 60), (100, 120), (120, 120), (140, 120),
        (160, 120), (160, 140), (140, 140), (120, 140), (120, 160), (140, 160), (160, 160), (180, 160),
        (200, 160), (200, 140), (200, 120), (180, 120), (180, 140), (160, 180), (160, 200), (140, 200),
        (140, 180), (120, 180), (120, 200), (100, 200), (100, 180), (80, 180), (80, 200), (60, 200),
        (40, 200), (20, 200), (20, 180), (40, 180), (60, 180), (180, 180), (200, 180), (200, 200),
        (180, 200), (180, 100), (180, 80), (200, 80), (200, 100)]
        self.assertEqual(self.algoritmi.get_visited(), labyrinth)

    def test_algoritmi_toimii_oikein_kun_option_3(self):
        self.algoritmi.carve_mysteerimaze(0, '3')
        labyrinth = [(20, 20), (20, 40), (20, 60), (40, 60), (40, 80), (40, 100), (20, 100), (20, 80),
        (40, 20), (40, 40), (60, 40), (60, 20), (80, 20), (100, 20), (100, 40), (120, 40), (140, 40),
        (140, 20), (120, 20), (60, 60), (60, 80), (80, 80), (80, 60), (100, 60), (100, 80), (100, 100),
        (100, 120), (120, 120), (120, 140), (100, 140), (100, 160), (100, 180), (100, 200), (120, 200),
        (120, 180), (120, 160), (140, 160), (160, 160), (160, 140), (180, 140), (200, 140), (200, 120),
        (180, 120), (180, 100), (160, 100), (140, 100), (140, 80), (120, 80), (120, 100), (60, 100),
        (80, 100), (80, 120), (60, 120), (60, 140), (80, 140), (80, 160), (80, 180), (80, 200), (60, 200),
        (60, 180), (60, 160), (40, 160), (40, 140), (40, 120), (20, 120), (20, 140), (20, 160), (20, 180),
        (20, 200), (40, 200), (40, 180), (80, 40), (120, 60), (140, 60), (160, 60), (180, 60), (180, 40),
        (180, 20), (160, 20), (160, 40), (140, 120), (160, 120), (140, 140), (140, 200), (160, 200),
        (180, 200), (180, 180), (180, 160), (200, 160), (200, 180), (200, 200), (140, 180), (160, 180),
        (200, 100), (200, 80), (200, 60), (200, 40), (200, 20), (180, 80), (160, 80)]
        self.assertEqual(self.algoritmi.get_visited(), labyrinth)

    def test_algoritmi_toimii_oikein_kun_option_4(self):
        self.algoritmi.carve_mysteerimaze(0, '4')
        labyrinth = [(20, 20), (20, 40), (20, 60), (40, 60), (40, 80), (40, 100), (20, 100), (20, 80),
        (20, 120), (40, 120), (60, 120), (60, 140), (80, 140), (100, 140), (100, 120), (80, 120), (80, 100),
        (60, 100), (60, 80), (80, 80), (80, 60), (60, 60), (60, 40), (40, 40), (40, 20), (60, 20), (80, 20),
        (80, 40), (100, 40), (100, 20), (120, 20), (140, 20), (160, 20), (180, 20), (180, 40), (180, 60),
        (180, 80), (180, 100), (200, 100), (200, 80), (200, 60), (200, 40), (200, 20), (120, 120), (140, 120)
        , (160, 120), (160, 100), (160, 80), (140, 80), (120, 80), (120, 100), (100, 100), (100, 80),
        (100, 60), (120, 60), (140, 60), (140, 40), (160, 40), (160, 60), (120, 40), (140, 100), (140, 140),
        (140, 160), (140, 180), (120, 180), (120, 160), (100, 160), (80, 160), (80, 180), (80, 200),
        (60, 200), (60, 180), (60, 160), (40, 160), (20, 160), (20, 140), (40, 140), (20, 180), (40, 180),
        (40, 200), (20, 200), (120, 140), (200, 120), (180, 120), (180, 140), (180, 160), (200, 160),
        (200, 180), (200, 200), (180, 200), (180, 180), (160, 180), (160, 200), (140, 200), (120, 200),
        (100, 200), (100, 180), (160, 160), (160, 140), (200, 140)]
        self.assertEqual(self.algoritmi.get_visited(), labyrinth)

    def test_algoritmi_toimii_oikein_kun_option_5(self):
        self.algoritmi.carve_mysteerimaze(0, '5')
        labyrinth = [(20, 20), (20, 40), (20, 60), (40, 60), (40, 80), (40, 100), (20, 100), (20, 80),
        (20, 120), (20, 140), (40, 140), (40, 120), (60, 120), (60, 100), (60, 80), (60, 60), (80, 60),
        (80, 80), (80, 100), (80, 120), (100, 120), (100, 100), (100, 80), (100, 60), (100, 40), (120, 40),
        (120, 20), (140, 20), (160, 20), (160, 40), (160, 60), (160, 80), (160, 100), (180, 100), (180, 80),
        (180, 60), (180, 40), (200, 40), (200, 20), (180, 20), (120, 60), (140, 60), (140, 40), (160, 120),
        (180, 120), (180, 140), (180, 160), (200, 160), (200, 140), (200, 120), (200, 100), (200, 80),
        (200, 60), (140, 120), (120, 120), (120, 100), (120, 80), (140, 80), (140, 100), (80, 40), (60, 40),
        (40, 40), (40, 20), (60, 20), (80, 20), (100, 20), (160, 140), (160, 160), (160, 180), (140, 180),
        (140, 200), (120, 200), (120, 180), (100, 180), (80, 180), (80, 160), (100, 160), (120, 160),
        (120, 140), (100, 140), (80, 140), (60, 140), (60, 160), (60, 180), (40, 180), (40, 200), (60, 200),
        (80, 200), (100, 200), (180, 180), (200, 180), (200, 200), (180, 200), (160, 200), (140, 140),
        (140, 160), (40, 160), (20, 160), (20, 180), (20, 200)]
        self.assertEqual(self.algoritmi.get_visited(), labyrinth)
